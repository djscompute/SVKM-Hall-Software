import React, { useState } from "react";
import { EachHallSessionType, EachHallType } from "../../types/Hall.types";
import "./HallPricing.css";
import { toast } from "react-toastify";

type Props = {
  sessions: EachHallSessionType[];
  setHallData: React.Dispatch<React.SetStateAction<EachHallType>>;
};

function HallPricing({ sessions, setHallData }: Props) {
  const [nameOfSessionToEdit, setNameOfSessionToEdit] = useState<string>();

  // i am using session.name everywhere because at this point session._id will not be set of any
  //  of the sessions as it is generated by mongodb after it has been in the database.
  function removePriceCategory(sessionName: string, categoryName: string) {
    setHallData((prev) => {
      const modifiedSessionsArray = prev.sessions?.map((session) => {
        if (session.name === sessionName) {
          const modifiedPriceArray = session?.price?.filter(
            (item) => item.categoryName !== categoryName
          );
          return {
            ...session,
            price: modifiedPriceArray,
          };
        }
        return session;
      });

      return {
        ...prev,
        sessions: modifiedSessionsArray,
      };
    });
  }

  return (
    <div className="about-hall flex justify-between bg-blue-100 w-[60%] md:w-[90%] lg:w-full py-5 px-7 rounded-lg">
      <div className="flex flex-col gap-3 mb-5 w-full">
        <h2 className="font-bold text-xl mb-3 text-center">
          Pricing For sessions
        </h2>
        <div className="flex flex-col w-full">
          {sessions?.map((eachSession) => (
            <div className="flex items-center">
              <table id="session-pricing-table" className=" ">
                <thead>
                  <tr>
                    <th>#</th>
                    {eachSession.price?.map((eachCatObject) => (
                      <th>
                        <span>{eachCatObject.categoryName}</span>
                        <button
                          className="bg-red-500 text-white px-2 rounded-sm ms-1"
                          onClick={() =>
                            removePriceCategory(
                              eachSession.name,
                              eachCatObject.categoryName
                            )
                          }
                        >
                          X
                        </button>
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td className="">{eachSession.name}</td>
                    {eachSession.price?.map((eachCatObject) => (
                      <td>
                        <input
                          placeholder={`${eachCatObject.categoryName} price`}
                          value={eachCatObject.price}
                          // type="number"
                          onChange={(e) => {
                            console.log(eachSession._id);
                            let inputValue = e.target.value;
                            if (inputValue.length == 0) inputValue = "0";

                            const regex = /^-?\d+(\.\d+)?$/; // only numbers pass through
                            if (!regex.test(inputValue)) {
                              toast.error("can only be number");
                              return;
                            }

                            setHallData((prev) => {
                              const modifiedSessionsArray = prev.sessions?.map(
                                (a) => {
                                  if (a.name == eachSession.name) {
                                    const modifiedPriceArray = a?.price?.map(
                                      (item) => {
                                        if (
                                          item.categoryName ===
                                          eachCatObject.categoryName
                                        ) {
                                          return {
                                            ...item,
                                            price: Number(inputValue), // Convert string to number
                                          };
                                        }
                                        return item;
                                      }
                                    );
                                    return {
                                      ...a,
                                      price: modifiedPriceArray,
                                    };
                                  }
                                  return a;
                                }
                              );

                              return {
                                ...prev,
                                sessions: modifiedSessionsArray,
                              };
                            });
                          }}
                        />
                      </td>
                    ))}
                  </tr>
                </tbody>
              </table>
              <button>+</button>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default HallPricing;
